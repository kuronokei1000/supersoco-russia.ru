BX.BitrixVue.component("mpm-app",{props:{state:{type:Object}},computed:{sections(){let sections=[];for(const[sectionId,sectionObject]of Object.entries(this.state.sections)){let isSelected=this.state.selectedSectionIds.findIndex(id=>Number(id)===Number(sectionId))>-1,section={id:sectionId,name:sectionObject.NAME,children:[]};if(sectionObject.CHILDREN)for(const[subSectionId,subSectionName]of Object.entries(sectionObject.CHILDREN))isSelected||(isSelected=this.state.selectedSectionIds.findIndex(id=>Number(id)===Number(subSectionId))>-1),section.children.push({id:subSectionId,name:subSectionName,mapData:this.state.map[subSectionId]||{}});section.isSelected=isSelected,sections.push(section)}return sections}},template:'\n        <div class="mpm-setting">\n            <div class="mpm-setting__post" v-if="state.map">\n                <span v-for="(map,  bxSectionId) in state.map">\n                    <input \n                        type="hidden" \n                        :name="\'MAP[\' + bxSectionId + \'][BX_SECTION]\'" \n                        :value="bxSectionId"\n                    />\n                    \n                    <input \n                        type="hidden" \n                        :name="\'MAP[\' + bxSectionId + \'][WB_SECTION]\'" \n                        :value="map[\'WB_SECTION\']"\n                    />\n                    \n                    <span\n                         v-for="(property, index) in map[\'PROPERTIES\']"\n                    >\n                        <input                    \n                            type="hidden" \n                            :name="\'MAP[\' + bxSectionId + \'][PROPERTIES][\' + index + \'][BX_PROPERTY]\'" \n                            :value="property[\'BX_PROPERTY\']"\n                        />\n                        <input                    \n                            type="hidden" \n                            :name="\'MAP[\' + bxSectionId + \'][PROPERTIES][\' + index + \'][BX_SKU_PROPERTY]\'" \n                            :value="property[\'BX_SKU_PROPERTY\']"\n                        />\n                        <input                    \n                            type="hidden" \n                            :name="\'MAP[\' + bxSectionId + \'][PROPERTIES][\' + index + \'][WB_PROPERTY]\'" \n                            :value="property[\'WB_PROPERTY\'] || \'\'"\n                        />\n                        <input                    \n                            type="hidden" \n                            :name="\'MAP[\' + bxSectionId + \'][PROPERTIES][\' + index + \'][DEFAULT_VALUE]\'" \n                            :value="property[\'DEFAULT_VALUE\'] || \'\'"\n                        />\n                    </span>               \n                </span>            \n            </div>\n\n            <mpm-bx-group\n                v-for="section in sections"\n                :key="section.id"    \n                v-bind="section"    \n            />\n        </div>    \n    '}),BX.BitrixVue.component("mpm-app-stores",{props:{state:{type:Object}},methods:{onSelectStore(payload){this.$root.updateMapStore(payload.bxStoreId,payload.wbStoreId)}},template:'\n        <div class="mpm-setting-stores">\n            <div class="mpm-setting__post" v-if="state.map">\n                <span v-for="(map,  bxStoreId) in state.map">\n                    <input \n                        type="hidden" \n                        :name="\'MAP_STORE[\' + bxStoreId + \'][BX_STORE_ID]\'" \n                        :value="map[\'BX_STORE_ID\']"\n                    />\n                    \n                    <input \n                        type="hidden" \n                        :name="\'MAP_STORE[\' + bxStoreId + \'][WB_STORE_ID]\'" \n                        :value="map[\'WB_STORE_ID\']"\n                    />\n                </span>            \n            </div>\n           <table width="100%" class="mpm__table" style="text-align: center;">\n                <thead>\n                    <tr>\n                        <th>{{ BX.message(\'AS_STORE_BX\') }}</th>\n                        <th>{{ BX.message(\'AS_STORE_WB\') }}</th>\n                    </tr>    \n                </thead>\n                <tbody v-if="state.stores.length > 0">                    \n                   <mpm-store                                   \n                        v-for="store in state.stores"\n                        :key="store.ID"\n                        :id="store.ID"\n                        :name="store.TITLE"\n                        :address="store.ADDRESS"\n                        :map-data="state.map[store.ID] || null"\n                        @on-select="onSelectStore"\n                   />                    \n                </tbody>\n                <tbody v-else>\n                    <tr>\n                        <td colspan="2">\n                            <div class="mpm__empty">\n                                {{ BX.message(\'AS_EMPTY_STORES\') }}\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    '}),BX.BitrixVue.component("mpm-bx-group",{props:{name:String,isSelected:Boolean,children:{type:Array,default:()=>[]}},data:()=>({isOpened:!1}),mounted(){this.$nextTick(()=>{this.isSelected&&(this.isOpened=!0)})},methods:{toggleBody(){this.isOpened?this.closeBody():this.openBody()},openBody(){this.isOpened=!0},closeBody(){this.isOpened=!1}},template:'\n        <div class="mpm__group">\n            <div \n                class="mpm__group-head"\n                @dblclick="toggleBody"\n            >\n                <span class="mpm__group-head-check" >\n                    <input \n                        title="Select to Customize" \n                        type="checkbox"\n                        :checked="isOpened"\n                        @click="toggleBody"\n                    />\n                </span>\n                <span class="mpm__group-head-title">\n                    <strong>{{ name }}</strong>\n                </span>\n            </div>\n            <div \n                class="mpm__group-body"\n                v-if="isOpened"\n            >\n                <mpm-bx-sections\n                    :sections="children"\n                />\n            </div>\n        </div>\n    '}),BX.BitrixVue.component("mpm-bx-sections",{props:{sections:{type:Array,default:()=>[]}},template:'\n        <table width="100%" class="mpm__table" style="text-align: center;">\n            <thead>\n                <tr>\n                    <th class="mpm__td-section-id">ID</th>\n                    <th class="mpm__td-section-name">{{ BX.message(\'AS_SECTION_IN_BX\') }}</th>\n                    <th>{{ BX.message(\'AS_SECTION_IN_WB\') }}</th>\n                </tr>    \n            </thead>\n            <tbody>\n               <tr>\n                    <td colspan="3">\n                         <mpm-bx-section\n                            v-for="section in sections"\n                            :key="section.id"\n                            v-bind="section"\n                         />\n                    </td>\n               </tr>               \n            </tbody>\n        </table>\n    '}),BX.BitrixVue.component("mpm-bx-section",{props:{id:{type:Number,request:!0},name:{type:String,request:!0},mapData:{type:Object}},data:()=>({isPropertyOpened:!1,categoryCode:null,categoryId:null,categoryProperties:[],isLoading:!1}),mounted(){this.mapData&&Object.keys(this.mapData).length&&(this.categoryCode=this.mapData.WB_SECTION,this.$root.externalSections&&this.$root.externalSections[this.mapData.WB_SECTION]&&(this.categoryCode=this.$root.externalSections[this.mapData.WB_SECTION].id,this.categoryId=this.$root.externalSections[this.mapData.WB_SECTION].data_id))},methods:{toggleProperties(){this.isPropertyOpened?this.closeProperties():this.openProperties()},openProperties(){this.isPropertyOpened=!0,!this.categoryProperties.length&&this.categoryCode&&this.loadProperties()},closeProperties(){this.isPropertyOpened=!1},loadProperties(){this.categoryCode&&(this.isLoading=!0,BX.ajax({url:this.$root.ajaxUrl,data:{ajax:!0,IBLOCK_ID:this.$root.iblockId,sessid:this.$root.sessid,action:"find_category_properties",category:this.categoryId||this.categoryCode,API_KEY:this.$root.apiKey,CLIENT_ID:this.$root.clientId,controller:this.$root.controller},method:"POST",dataType:"json",onsuccess:data=>{this.categoryProperties=data,this.isLoading=!1},onfailure:()=>{this.isLoading=!1}}))},onSelectCategory(categoryCode,categoryId=0){categoryCode&&(this.categoryCode=categoryCode,categoryId&&(this.categoryId=categoryId),this.$root.updateMapSection(this.id,this.categoryId||this.categoryCode),this.loadProperties())},onUnselectCategory(){this.categoryCode=null,this.categoryId=null,this.categoryProperties=[],this.$root.deleteMapSection(this.id)}},template:'\n        <table width="100%" border="0">        \n            <tr>\n                <td class="mpm__td-section-id">{{ id }}</td>\n                <td class="mpm__td-section-name">{{ name }}</td>\n                <td>\n                    <div class="mpm__row">\n                        <div class="mpm__col mpm__col--mr">\n                            <mpm-control-select-service-category \n                                :value="categoryCode"\n                                @on-select="onSelectCategory"\n                                @on-unselect="onUnselectCategory"\n                            />\n                        </div>\n                        <div>\n                            <a \n                                href="#"\n                                @click.prevent="toggleProperties"\n                            >\n                                {{ isPropertyOpened ? BX.message(\'AS_HIDE\') : BX.message(\'AS_OPEN\') }} {{ BX.message(\'AS_PROPERTIES\') }}\n                            </a>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td colspan="3" v-if="isPropertyOpened">\n                \n                    <div \n                        class="mpm__properties"\n                        v-if="isLoading && !categoryProperties.length"\n                    >\n                        <div class="mpm__empty">\n                            {{ BX.message(\'AS_LOADING\') }}\n                        </div>\n                    </div>                   \n                   <template v-else>\n                        <mpm-properties\n                            :properties="categoryProperties"\n                            :category-id="categoryId"\n                            :bx-section-id="id"\n                            :map-data="mapData[\'PROPERTIES\']"\n                        />\n                    </template>               \n                </td>\n            </tr> \n        </table>\n    '}),BX.BitrixVue.component("mpm-properties",{props:{bxSectionId:{type:Number,required:!0},categoryId:{type:Number},properties:{type:Array,default:[]},mapData:{type:Array,default:[]}},mounted(){},data:()=>({isOnlyRequired:!0}),computed:{computedProperties(){return this.properties.sort((a,b)=>b.isRequired-a.isRequired).map(property=>{const findValue=this.mapData.find(item=>item.WB_PROPERTY===property.code);return property.mapData={},findValue&&(property.mapData=findValue),property})}},methods:{toggleVisible(){this.isOnlyRequired=!this.isOnlyRequired}},template:'\n        <div class="mpm__properties">        \n             <div \n                class="mpm__empty"\n                v-if="!properties.length"\n            >\n                {{ BX.message(\'AS_CHOOSE_A_SECTION\') }}\n            </div>            \n            <template \n                v-else\n            >\n                <div class="mpm__properties-tools">\n                    <div class="mpm__row">\n                        <div class="mpm__col">\n                            <a \n                                href="#" \n                                class="mpm__link-tool"                                \n                                :class="{\n                                    \'active\': isOnlyRequired,\n                                }"\n                                @click.prevent="toggleVisible"\n                            >\n                                {{  BX.message(\'AS_ONLY_REQUIRED\') }}\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <table class="mpm__table-properties" cellspacing="0" cellpadding="0">\n                    <thead>\n                        <tr>\n                            <th>{{  BX.message(\'AS_PROPERTY_IN_WB\') }}</th>\n                            <th>{{  BX.message(\'AS_PROPERTY_IN_BX\') }}</th>\n                            <th v-if="this.$root.useSkuProps">{{  BX.message(\'AS_PROPERTY_IN_BX_SKU\') }}</th>\n                        </tr>\n                    </thead>\n                    <tbody>      \n                          <mpm-property\n                            v-for="(property, index) in computedProperties"\n                            :key="index"                            \n                            :visible="(isOnlyRequired && property.isRequired) || !isOnlyRequired"\n                            :bx-section-id="bxSectionId"\n                            :category-id="categoryId"\n                            v-bind="property"\n                          />             \n                    </tbody>\n                </table>            \n            </template>\n        </div>\n    '}),BX.BitrixVue.component("mpm-property",{props:{bxSectionId:{type:Number,required:!0},categoryId:{type:Number},code:{type:String,default:"undefined"},name:{type:String,default:"undefined"},type:{type:String},dictionaryId:{type:Number},isRequired:{type:Boolean,default:!1},visible:{type:Boolean,default:!1},mapData:{type:Object}},data:()=>({defaultValue:"",bxPropertyCode:"",bxSkuPropertyCode:"",titleType:"",syncTitle:""}),mounted(){this.mapData&&(this.mapData.DEFAULT_VALUE&&(this.defaultValue=this.mapData.DEFAULT_VALUE),this.mapData.BX_PROPERTY&&(this.bxPropertyCode=this.mapData.BX_PROPERTY),this.mapData.BX_SKU_PROPERTY&&(this.bxSkuPropertyCode=this.mapData.BX_SKU_PROPERTY)),this.titleType=`${BX.message("MATCHING_PROPERTY_VALUES")}${this.type}`,this.syncTitle=`${BX.message("SYNC_PROPERTY_VALUES")}`},methods:{onBxSelectProperty(bxPropertyCode){this.bxPropertyCode=bxPropertyCode||"",this.$root.updateMapProperty(Number(this.bxSectionId),bxPropertyCode,this.code,this.defaultValue,this.bxSkuPropertyCode)},onChangeDefaultValue(){this.$root.updateMapProperty(Number(this.bxSectionId),this.bxPropertyCode,this.code,this.defaultValue,this.bxSkuPropertyCode)},onBxSelectSkuProperty(bxSkuPropertyCode){this.bxSkuPropertyCode=bxSkuPropertyCode||"",this.$root.updateMapProperty(Number(this.bxSectionId),this.bxPropertyCode,this.code,this.defaultValue,bxSkuPropertyCode)},showMatchingPropsValue(post={}){const obDetailWindow=new BX.CAdminDialog({content_url:this.$root.ajaxUrlPropValuesMatch,content_post:Object.assign({ajax:!0,sessid:this.$root.sessid,IBLOCK_ID:this.$root.iblockId,API_KEY:this.$root.apiKey,CLIENT_ID:this.$root.clientId,ozonId:this.code,ozonCategoryId:this.categoryId,dictionaryId:this.dictionaryId,bxCode:this.bxPropertyCode,bxSkuCode:this.bxSkuPropertyCode},post),width:510,height:500});obDetailWindow.Show()},syncPropsValue(){this.showMatchingPropsValue({action:"sync"})}},template:'\n        <tr v-show="visible">\n            <td class="mpm__td-property-name">\n                {{ name }}\n                <span v-if="isRequired" style="color: red;">*</span>\n            </td>\n            <td>\n                <div class="mpm__row mpm__row--center">\n                    <div class="mpm__col" :class="{\'mpm__col--compact\': this.$root.useSkuProps}">\n                        <mpm-control-select-property\n                            :value="mapData[\'BX_PROPERTY\']"\n                            @on-select="onBxSelectProperty"\n                        />\n                    </div>\n                    <div>\n                        {{ BX.message(\'AS_OR\') }}\n                    </div>\n                    <div class="mpm__col">\n                        <input \n                            v-model="defaultValue"                            \n                            class="mpm__control mpm__control-input" \n                            type="text"\n                            @change="onChangeDefaultValue"\n                        />\n                    </div>\n                    <button \n                        v-if="type"\n                        type="button"\n                        :title="titleType"\n                        :disabled="!dictionaryId"\n                        @click="showMatchingPropsValue"\n                    >+</button>&nbsp;\n                    <button \n                        v-if="type"\n                        type="button"\n                        :title="syncTitle"\n                        :disabled="!dictionaryId"\n                        @click="syncPropsValue"\n                    >?</button>\n                </div>\n            </td>\n            <td v-if="this.$root.useSkuProps">\n                <div class="mpm__col mpm__col--compact sku">\n                    <mpm-control-select-sku-property\n                        :value="mapData[\'BX_SKU_PROPERTY\']"\n                        @on-select="onBxSelectSkuProperty"\n                    />\n                </div>\n            </td>\n        </tr>  \n    '}),BX.BitrixVue.component("mpm-store",{props:{id:Number,name:String,address:String,mapData:{type:Object}},data(){},methods:{onSelectWarehouse(wbStoreId){this.$emit("on-select",{bxStoreId:Number(this.id),wbStoreId:Number(wbStoreId)})}},mounted(){},template:"\n       <tr>\n            <td>            \n               <span style=\"font-weight: bold;\">{{ name }}</span>      \n               <span style=\"\">{{ address ? '- ' + address : '' }}</span>        \n            </td>\n            <td>\n                <mpm-control-select-warehouses\n                    :value=\"mapData && mapData['WB_STORE_ID'] ? mapData['WB_STORE_ID'] : ''\"\n                    @on-select=\"onSelectWarehouse\"\n                />\n            </td>\n       </tr> \n    "}),BX.BitrixVue.component("mpm-control-select-property",{props:{value:{type:String}},data:()=>({select2:null}),mounted(){setTimeout(()=>{this.select2=$(this.$refs.elSelect).select2({dropdownParent:".mpm-setting",language:{searching:function(){return BX.message("AS_SELECT2_SEARCHING")},errorLoading:function(){return BX.message("AS_SELECT2_ERROR_LOADING")}},data:this.$root.propertySelectOptions}).on("select2:select",event=>{this.$emit("on-select",event.params.data.id)}),this.select2.val(this.value).trigger("change")},0)},template:'\n        <span class="mpm__wrapper mpm__wrapper--flex"> \n            <select class="mpm__select" ref="elSelect">\n                <option value="">-</option>\n            </select>\n        </span>        \n    '}),BX.BitrixVue.component("mpm-control-select-sku-property",{props:{value:{type:String}},data:()=>({select2:null}),mounted(){setTimeout(()=>{this.select2=$(this.$refs.elSelect).select2({dropdownParent:".mpm-setting",language:{searching:function(){return BX.message("AS_SELECT2_SEARCHING")},errorLoading:function(){return BX.message("AS_SELECT2_ERROR_LOADING")}},data:this.$root.propertySkuSelectOptions,templateResult:state=>"id"in state&&!state.id?BX.message("VALUES_FROM_CATALOG"):state.text}).on("select2:select",event=>{this.$emit("on-select",event.params.data.id)}),this.select2.val(this.value).trigger("change")},0)},template:'\n        <span class="mpm__wrapper mpm__wrapper--flex"> \n            <select class="mpm__select" ref="elSelect">\n                <option value="">-</option>\n            </select>\n        </span>        \n    '}),BX.BitrixVue.component("mpm-control-select-service-category",{props:{value:{type:String}},data:()=>({select2:null,isDropdownVisible:!1}),methods:{click(){this.isDropdownVisible=!this.isDropdownVisible},unselected(){this.$emit("on-unselect"),this.select2.val(null).trigger("change")}},mounted(){this.select2=$(this.$refs.elSelect).select2({minimumInputLength:3,dropdownParent:".mpm-setting",language:{inputTooShort:function(){return BX.message("AS_SELECT2_TOO_SHORT_3")},searching:function(){return BX.message("AS_SELECT2_SEARCHING")},errorLoading:function(){return BX.message("AS_SELECT2_ERROR_LOADING")}},ajax:{url:this.$root.ajaxUrl,delay:250,dataType:"json",type:"POST",data:params=>({ajax:!0,sessid:this.$root.sessid,IBLOCK_ID:this.$root.iblockId,API_KEY:this.$root.apiKey,CLIENT_ID:this.$root.clientId,search:params.term,action:"find_category",controller:this.$root.controller}),processResults:function(data){return{results:data}}},templateSelection:function(state){return state.id}}).on("select2:select",event=>{this.$emit("on-select",event.params.data.id,event.params.data.data_id)})},template:'\n        <span class="mpm__wrapper mpm__wrapper--flex mpm__control-service-category"> \n            <select class="mpm__select" ref="elSelect">\n                <option>-</option>\n                <option\n                    v-if="value"\n                    selected="selected"\n                >\n                    {{ value }}\n                </option>\n            </select>\n             <span \n                title="Remove" \n                class="mpm__remove"\n                @click="unselected"\n             />\n        </span>        \n    '}),BX.BitrixVue.component("mpm-control-select-warehouses",{props:{value:{type:String}},data:()=>({select2:null}),mounted(){setTimeout(()=>{this.select2=$(this.$refs.elSelect).select2({dropdownParent:".mpm-setting-stores",language:{searching:function(){return BX.message("AS_SELECT2_SEARCHING")},errorLoading:function(){return BX.message("AS_SELECT2_ERROR_LOADING")}},data:this.$root.wbStoreSelectOptions,minimumResultsForSearch:10}).on("select2:select",event=>{this.$emit("on-select",event.params.data.id)}),this.select2.val(this.value).trigger("change")},0)},template:'\n        <span class="mpm__wrapper mpm__wrapper--flex"> \n            <select class="mpm__select" ref="elSelect">\n                <option value="">-</option>\n            </select>\n        </span>        \n    '});