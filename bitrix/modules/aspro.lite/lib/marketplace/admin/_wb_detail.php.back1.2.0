<?php
/**
 * @global CMain $APPLICATION
 */
define('STOP_STATISTICS', true);
define('BX_SECURITY_SHOW_MESSAGE', true);

require_once($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/prolog_admin_before.php');

IncludeModuleLangFile($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/aspro.lite/lib/marketplace/wildberries.php');

use
    \Bitrix\Main\Application,
    \Bitrix\Main\Localization\Loc,
    \Aspro\Lite\Marketplace\Helper,
    \Aspro\Lite\Marketplace\Ajax\Wildberries as AjaxHelper,
    \Aspro\Lite\Marketplace\Maps\Wildberries as WildberriesMap,
    \Aspro\Lite\Marketplace\Adapters\Wildberries as Adapter,
    \Aspro\Lite\Marketplace\Config\Wildberries as Config;

if (!check_bitrix_sessid()) {
    require($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/prolog_admin_after.php');
    $APPLICATION->AuthForm(GetMessage('ACCESS_DENIED'));
    require($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/epilog_admin.php');
    die();
}

if ($_SERVER['REQUEST_METHOD'] == 'GET') {
    require($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/prolog_admin_after.php');
    require($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/epilog_admin.php');
    die();
}

if (!check_bitrix_sessid()) {
    require($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/prolog_admin_after.php');
    $APPLICATION->AuthForm(GetMessage('ACCESS_DENIED'));
    require($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/epilog_admin.php');
    die();
}


if ((!isset($_REQUEST['IBLOCK_ID'])) || ($_REQUEST['IBLOCK_ID'] == '')) {
    require($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/prolog_admin_after.php');
    ShowError('Wrong IBLOCK_ID');
    require($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/epilog_admin.php');
    die();
}

if (!Config::getApiKey()) {
    require($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/prolog_admin_after.php');
    ShowError('API Key is empty');
    echo '<a href="/bitrix/admin/aspro.lite_mp_wildberries.php?mid=&lang=ru">You can set the API key here</a>';
    require($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/epilog_admin.php');
    die();
}

$request = Application::getInstance()->getContext()->getRequest();

$iblockId = (int)$request->get('IBLOCK_ID');
$sessid = str_replace('sessid=', '', bitrix_sessid_get());
$existsSystemProperties = Config::existsIblockSystemProperties($iblockId);

$selectedSectionIds = [];
if ($request->get('SECTIONS')) {
    $selectedSectionIds = json_decode($request->get('SECTIONS'));
}

$ajaxHelper = new AjaxHelper();
if ($ajaxHelper->checkRequest($request)) {
    switch ($request->get('action')) {
        case 'find_category':
            echo \Bitrix\Main\Web\Json::encode($ajaxHelper->getCategoriesForSelect($request->get('search')));

            break;
        case 'find_category_properties':
            echo \Bitrix\Main\Web\Json::encode($ajaxHelper->getCategoryProperties($request->get('category')));

            break;
    }

    die();
}

$map = new WildberriesMap($iblockId);

if ($request->getRequestMethod() == 'POST' && (!empty($request->get('SaveMap')) || !empty($request->get('CreateSystemProperties')))) {
    if (!empty($request->get('SaveMap'))) {
        if ($map->setPostData($request->get('MAP'), $request->get('MAP_STORE') ?: [])) {
            $map->saveMap();
        }

    }

    if (!empty($request->get('CreateSystemProperties'))) {
        Config::createIblockSystemProperties($request->get('IBLOCK_ID'));
    }

    ?>
    <script type="text/javascript">
        top.BX.closeWait();
        top.BX.WindowManager.Get().Close();
    </script>
    <?
    die();
}

$APPLICATION->SetTitle(Loc::getMessage('AS_MAPPING_SETUP'));

require_once($_SERVER["DOCUMENT_ROOT"] . "/bitrix/modules/main/include/prolog_admin_after.php");

\CJSCore::Init(['jquery']);
\Bitrix\Main\UI\Extension::load('ui.vue');

$aTabs = [
    [
        'DIV' => 'wb-setting-map',
        'TAB' => Loc::getMessage('AS_MAPPING_SETUP_TAB_1'),
        'TITLE' => Loc::getMessage('AS_MAPPING_SETUP_TAB_1_TITLE')
    ],
    [
        'DIV' => 'wb-setting-store',
        'TAB' => Loc::getMessage('AS_MAPPING_SETUP_TAB_2'),
        'TITLE' => Loc::getMessage('AS_MAPPING_SETUP_TAB_2_TITLE')
    ],
];

$adapter = new Adapter();

$assetDir = $_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/aspro.lite/lib/marketplace/admin/assets/setting-mappings';

$sections = Helper::getSectionTree($iblockId);
$propertySelectOptions = Helper::getPropertySelectOptions($iblockId);
$stores = Helper::getAllStoreList();
$wbStoreSelectOptions = $adapter->encoding(
    array_map(function ($item) {
        return [
            'id' => $item['id'],
            'text' => $item['name']
        ];
    }, $adapter->getServiceWarehouses())
);

?>
<?php if ($existsSystemProperties) : ?>
    <style>
        <? require_once ($assetDir . '/select2.css')?>
        <? require_once ($assetDir . '/style.css')?>
    </style>

    <form name="wb_form" method="POST" action="<?= $APPLICATION->GetCurPage(); ?>">
        <input type="hidden" name="lang" value="<?= LANGUAGE_ID; ?>">
        <input type="hidden" name="bxpublic" value="Y">
        <input type="hidden" name="Update" value="Y"/>
        <input type="hidden" name="IBLOCK_ID" value="<? echo $iblockId; ?>"/>
        <? echo bitrix_sessid_post(); ?>
        <input type="hidden" name="SaveMap" value="true">

        <?php
        $tabControl = new \CAdminTabControl('tabControl', $aTabs, true, true);

        $tabControl->Begin();

        $tabControl->BeginNextTab();
        ?>

        <div id="marketplace_map_setting">
            <mpm-app :state="state"/>
        </div>

        <? $tabControl->BeginNextTab(); ?>

        <div id="marketplace_map_store_setting">
            <mpm-app-stores :state="state"/>
        </div>

        <?php
        $tabControl->EndTab();
        $tabControl->Buttons(array());
        $tabControl->End();
        ?>
    </form>
    <script>
        (function () {
            <? require_once($assetDir . '/select2.js')?>
            <? require_once($assetDir . '/components.js')?>
            <? require_once($assetDir . '/app-map.js')?>
            <? require_once($assetDir . '/app-map-stores.js')?>

            BX.message({
                AS_SECTION_IN_BX: '<?= Loc::getMessage('AS_SECTION_IN_BX') ?>',
                AS_SECTION_IN_WB: '<?= Loc::getMessage('AS_SECTION_IN_WB') ?>',
                AS_OPEN: '<?= Loc::getMessage('AS_OPEN') ?>',
                AS_HIDE: '<?= Loc::getMessage('AS_HIDE') ?>',
                AS_PROPERTIES: '<?= Loc::getMessage('AS_PROPERTIES') ?>',
                AS_ONLY_REQUIRED: '<?= Loc::getMessage('AS_ONLY_REQUIRED') ?>',
                AS_PROPERTY_IN_WB: '<?= Loc::getMessage('AS_PROPERTY_IN_WB') ?>',
                AS_PROPERTY_IN_BX: '<?= Loc::getMessage('AS_PROPERTY_IN_BX') ?>',
                AS_OR: '<?= Loc::getMessage('AS_OR') ?>',
                AS_LOADING: '<?= Loc::getMessage('AS_LOADING') ?>',
                AS_CHOOSE_A_SECTION: '<?= Loc::getMessage('AS_CHOOSE_A_SECTION') ?>',
                AS_STORE_BX: '<?= Loc::getMessage('AS_STORE_BX') ?>',
                AS_STORE_WB: '<?= Loc::getMessage('AS_STORE_WB') ?>',
                AS_EMPTY_STORES: '<?= Loc::getMessage('AS_EMPTY_STORES') ?>',
            });

            AppMpMapSetting.setConfig(<?= CUtil::PhpToJSObject([
                'sessid' => $sessid,
                'iblockId' => $iblockId,
            ])?>)

            AppMpMapSetting.loadData(<?= CUtil::PhpToJSObject([
                'sections' => $sections,
                'propertySelectOptions' => $propertySelectOptions,
                'selectedSectionIds' => $selectedSectionIds,
                'map' => $map->getValues(true),
            ])?>)

            AppMpMapSetting.mount('#marketplace_map_setting');

            AppMpMapStoreSetting.setConfig(<?= CUtil::PhpToJSObject([
                'sessid' => $sessid,
                'iblockId' => $iblockId,
            ])?>);

            AppMpMapStoreSetting.loadData(<?= CUtil::PhpToJSObject([
                'stores' => $stores,
                'wbStoreSelectOptions' => $wbStoreSelectOptions,
                'map' => $map->getStoreValues(),
            ])?>)

            AppMpMapStoreSetting.mount('#marketplace_map_store_setting');
        })();
    </script>

<?php else : ?>
    <?php
    $tabControl = new \CAdminTabControl('tabControl', [
        [
            'DIV' => 'wb-setting-create',
            'TAB' => Loc::getMessage('AS_CREATE_SYSTEM_PROPERTIES'),
            'TITLE' => Loc::getMessage('AS_MESSAGE_MISSING_SYSTEM_PROPERTIES_1')
        ]
    ], true, true);
    ?>
    <div class="mpm-content">
        <form name="wb_form" method="POST" action="<?= $APPLICATION->GetCurPage(); ?>">
            <?
            $tabControl->Begin();
            $tabControl->BeginNextTab();
            ?>

            <? echo bitrix_sessid_post(); ?>
            <input type="hidden" name="CreateSystemProperties" value="true">
            <input type="hidden" name="IBLOCK_ID" value="<? echo $iblockId; ?>"/>
            <?= Loc::getMessage('AS_MESSAGE_MISSING_SYSTEM_PROPERTIES_2') ?>
            <ul>
                <? foreach (Config::getSystemPropertyCodes() as $propertyCode) : ?>
                    <li><?= Loc::getMessage('AS_FORM_LABEL_' . $propertyCode) ?> [<?= $propertyCode ?>]</li>
                <? endforeach ?>
            </ul>

            <?
            $tabControl->EndTab();
            $tabControl->Buttons(array());
            $tabControl->End();
            ?>
        </form>
    </div>
<?php endif ?>

<?php require_once($_SERVER["DOCUMENT_ROOT"] . '/bitrix/modules/main/include/epilog_admin.php') ?>

